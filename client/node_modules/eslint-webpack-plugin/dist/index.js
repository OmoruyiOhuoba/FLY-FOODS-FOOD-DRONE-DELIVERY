"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = require("path");

var _arrify = _interopRequireDefault(require("arrify"));

var _options = require("./options");

var _DirtyFileWatcher = _interopRequireDefault(require("./DirtyFileWatcher"));

var _linter = _interopRequireDefault(require("./linter"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @typedef {import('webpack').Compiler} Compiler */

/** @typedef {import('./options').Options} Options */
class ESLintWebpackPlugin {
  /**
   * @param {Options} options
   */
  constructor(options = {}) {
    this.options = (0, _options.getOptions)(options);
  }
  /**
   * @param {Compiler} compiler
   * @returns {void}
   */


  apply(compiler) {
    const options = { ...this.options,
      // @ts-ignore
      files: (0, _utils.parseFiles)(this.options.files, this.getContext(compiler)),
      extensions: (0, _arrify.default)(this.options.extensions)
    };

    if (options.lintDirtyModulesOnly) {
      const dirtyFileWatcher = new _DirtyFileWatcher.default(options.files, options.extensions);
      /* istanbul ignore next */

      compiler.hooks.watchRun.tapPromise('ESLintWebpackPlugin', async runCompiler => {
        const files = dirtyFileWatcher.getDirtyFiles(runCompiler.fileTimestamps);

        if (files.length > 0) {
          await (0, _linter.default)({ ...options,
            files
          }, runCompiler);
        }
      });
    } else {
      compiler.hooks.run.tapPromise('ESLintWebpackPlugin', runCompiler => {
        return (0, _linter.default)(options, runCompiler);
      });
      /* istanbul ignore next */

      compiler.hooks.watchRun.tapPromise('ESLintWebpackPlugin', runCompiler => {
        return (0, _linter.default)(options, runCompiler);
      });
    }
  }
  /**
   *
   * @param {Compiler} compiler
   * @returns {string}
   */


  getContext(compiler) {
    if (!this.options.context) {
      return String(compiler.options.context);
    }

    if (!(0, _path.isAbsolute)(this.options.context)) {
      return (0, _path.join)(String(compiler.options.context), this.options.context);
    }

    return this.options.context;
  }

}

var _default = ESLintWebpackPlugin;
exports.default = _default;