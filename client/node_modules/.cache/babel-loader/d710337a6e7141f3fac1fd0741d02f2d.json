{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/CITY-RUNNER/client/src/components/Private-routes/PrivateRouteUser.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst PrivateRouteUser = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    auth\n  } = useSelector(state => ({\n    auth: state.auth\n  }));\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => localStorage.getItem('jwtToken') && auth.user.role === \"userrole\" ? /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 77\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/signinuser',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRouteUser, \"fXhysub96zJkDIUVrxtyfC1v0RU=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRouteUser;\nexport default PrivateRouteUser;\n/*({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem('jwtToken') ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    )} />\n    \n\n\n\n)\n\n\nfrom web ohhhhhhhhhh\n\nexport const PrivateRoute = ({ component: Component, roles, ...rest }) => (\n    <Route {...rest} render={props => {\n        const currentUser = authenticationService.currentUserValue;\n        if (!currentUser) {\n            // not logged in so redirect to login page with the return url\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        }\n\n        // check if route is restricted by role\n        if (roles && roles.indexOf(currentUser.role) === -1) {\n            // role not authorised so redirect to home page\n            return <Redirect to={{ pathname: '/'}} />\n        }\n\n        // authorised so return component\n        return <Component {...props} />\n    }} />\n)\n\n\n\n\n\nconst PrivateRouteUser = ({ component: Component, ...rest }) => (\n    \n    <Route {...rest} render={props => {\n        const dispatch = useDispatch();\n        const { auth, errors } = useSelector( state => ({\n        auth: state.auth,\n        errors: state.errors,\n        })); \n        \n\n        localStorage.getItem('jwtToken') && auth.user.role === \"userrole\" ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    }} />\n    \n    \n    \n    export default PrivateRouteUser*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRouteUser\");","map":{"version":3,"sources":["/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/CITY-RUNNER/client/src/components/Private-routes/PrivateRouteUser.jsx"],"names":["React","Route","Redirect","useSelector","useDispatch","PrivateRouteUser","component","Component","rest","auth","state","props","localStorage","getItem","user","role","pathname","from","location"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;AAIA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAAA;;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAWN,WAAW,CAAEO,KAAK,KAAK;AACxCD,IAAAA,IAAI,EAAEC,KAAK,CAACD;AAD4B,GAAL,CAAP,CAA5B;AAID,sBACK,QAAC,KAAD,OAAWD,IAAX;AAAiB,IAAA,MAAM,EAAEG,KAAK,IAC9BC,YAAY,CAACC,OAAb,CAAqB,UAArB,KAAoCJ,IAAI,CAACK,IAAL,CAAUC,IAAV,KAAmB,UAAvD,gBAAoE,QAAC,SAAD,OAAeJ;AAAf;AAAA;AAAA;AAAA;AAAA,YAApE,gBACE,QAAC,QAAD;AAAU,MAAA,EAAE,EAAE;AAAEK,QAAAA,QAAQ,EAAE,aAAZ;AAA2BN,QAAAA,KAAK,EAAE;AAAEO,UAAAA,IAAI,EAAEN,KAAK,CAACO;AAAd;AAAlC;AAAd;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADL;AAOF,CAZD;;GAAMb,gB;UACeF,W;;;KADfE,gB;AAeN,eAAeA,gBAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\n\n   \n\nconst PrivateRouteUser = ({ component: Component, ...rest }) => {\n    const { auth } = useSelector( state => ({\n    auth: state.auth,\n    })); \n    \n   return(\n        <Route {...rest} render={props => (\n        localStorage.getItem('jwtToken') && auth.user.role === \"userrole\" ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n        )} />\n   )\n    \n}\n\n    \nexport default PrivateRouteUser;\n\n\n\n/*({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem('jwtToken') ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    )} />\n    \n\n\n\n)\n\n\nfrom web ohhhhhhhhhh\n\nexport const PrivateRoute = ({ component: Component, roles, ...rest }) => (\n    <Route {...rest} render={props => {\n        const currentUser = authenticationService.currentUserValue;\n        if (!currentUser) {\n            // not logged in so redirect to login page with the return url\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        }\n\n        // check if route is restricted by role\n        if (roles && roles.indexOf(currentUser.role) === -1) {\n            // role not authorised so redirect to home page\n            return <Redirect to={{ pathname: '/'}} />\n        }\n\n        // authorised so return component\n        return <Component {...props} />\n    }} />\n)\n\n\n\n\n\nconst PrivateRouteUser = ({ component: Component, ...rest }) => (\n    \n    <Route {...rest} render={props => {\n        const dispatch = useDispatch();\n        const { auth, errors } = useSelector( state => ({\n        auth: state.auth,\n        errors: state.errors,\n        })); \n        \n\n        localStorage.getItem('jwtToken') && auth.user.role === \"userrole\" ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    }} />\n    \n    \n    \n    export default PrivateRouteUser*/ "]},"metadata":{},"sourceType":"module"}