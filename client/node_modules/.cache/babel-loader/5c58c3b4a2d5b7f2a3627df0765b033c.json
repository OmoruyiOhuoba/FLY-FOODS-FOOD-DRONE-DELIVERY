{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/CITY-RUNNER/client/src/components/Private-routes/PrivateRouteUser.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst PrivateRouteUser = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    auth,\n    errors\n  } = useSelector(state => ({\n    auth: state.auth,\n    errors: state.errors\n  }));\n\n  if (localStorage.getItem('jwtToken')) {\n    const Roler = ({\n      component: Component,\n      ...rest\n    }) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => auth.user.role === \"userrole\" ? /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/signinuser',\n          state: {\n            from: props.location\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n\n    Roler();\n  }\n};\n\n_s(PrivateRouteUser, \"//cYUxATffwyH/gKSsL3KRI5fRM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PrivateRouteUser;\nexport default PrivateRouteUser;\n/*({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem('jwtToken') ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    )} />\n    \n\n\n\n)*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRouteUser\");","map":{"version":3,"sources":["/Users/omoruyiohuoba/Desktop/APPS/WEB DEVELOPMENT/CITY-RUNNER/client/src/components/Private-routes/PrivateRouteUser.jsx"],"names":["React","Route","Redirect","useSelector","useDispatch","PrivateRouteUser","dispatch","auth","errors","state","localStorage","getItem","Roler","component","Component","rest","props","user","role","pathname","from","location"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;AAIA,MAAMC,gBAAgB,GAAG,MAAK;AAAA;;AAE1B,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AAEA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBL,WAAW,CAACM,KAAK,KAAK;AAC7CF,IAAAA,IAAI,EAAEE,KAAK,CAACF,IADiC;AAE7CC,IAAAA,MAAM,EAAEC,KAAK,CAACD;AAF+B,GAAL,CAAN,CAApC;;AAKA,MAAGE,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,EAAoC;AAEhC,UAAMC,KAAK,GAAG,CAAC;AAAEC,MAAAA,SAAS,EAAEC,SAAb;AAAwB,SAAGC;AAA3B,KAAD,kBACV,QAAC,KAAD,OAAWA,IAAX;AAAiB,MAAA,MAAM,EAAEC,KAAK,IAC1BT,IAAI,CAACU,IAAL,CAAUC,IAAV,KAAmB,UAAnB,gBAAgC,QAAC,SAAD,OAAeF;AAAf;AAAA;AAAA;AAAA;AAAA,cAAhC,gBACE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE;AAAEG,UAAAA,QAAQ,EAAE,aAAZ;AAA2BV,UAAAA,KAAK,EAAE;AAAEW,YAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAAlC;AAAd;AAAA;AAAA;AAAA;AAAA;AAFN;AAAA;AAAA;AAAA;AAAA,YADJ;;AAUJT,IAAAA,KAAK;AACJ;AAEJ,CAxBD;;GAAMP,gB;UAEeD,W,EAEQD,W;;;KAJvBE,gB;AA2BN,eAAeA,gBAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\n\n\n\nconst PrivateRouteUser = () =>{\n\n    const dispatch = useDispatch();\n\n    const { auth, errors } = useSelector(state => ({\n      auth: state.auth,\n      errors: state.errors,\n    })); \n\n    if(localStorage.getItem('jwtToken')){\n\n        const Roler = ({ component: Component, ...rest }) => (\n            <Route {...rest} render={props => (\n                auth.user.role === \"userrole\" ? <Component {...props} /> \n                : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n            )} />\n            \n        \n        \n        \n        )\n    Roler();\n    }\n\n}\n\n\nexport default PrivateRouteUser;\n\n\n\n/*({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => (\n        localStorage.getItem('jwtToken') ? <Component {...props} /> \n        : <Redirect to={{ pathname: '/signinuser', state: { from: props.location } }} />\n    )} />\n    \n\n\n\n)*/\n"]},"metadata":{},"sourceType":"module"}