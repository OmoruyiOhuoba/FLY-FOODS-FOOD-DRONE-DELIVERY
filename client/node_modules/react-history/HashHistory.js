'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createHashHistory = require('history/createHashHistory');

var _createHashHistory2 = _interopRequireDefault(_createHashHistory);

var _PropTypes = require('./PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Manages session history using window.location.hash.
 */
var HashHistory = function (_React$Component) {
  _inherits(HashHistory, _React$Component);

  function HashHistory() {
    _classCallCheck(this, HashHistory);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  HashHistory.prototype.getChildContext = function getChildContext() {
    return { history: this.history };
  };

  HashHistory.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        basename = _props.basename,
        getUserConfirmation = _props.getUserConfirmation,
        hashType = _props.hashType;


    this.history = (0, _createHashHistory2.default)({
      basename: basename,
      getUserConfirmation: getUserConfirmation,
      hashType: hashType
    });

    // Do this here so we catch actions in cDM.
    this.unlisten = this.history.listen(function () {
      return _this2.forceUpdate();
    });
  };

  HashHistory.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  HashHistory.prototype.render = function render() {
    var children = this.props.children;


    return typeof children === 'function' ? children(this.history) : _react2.default.Children.only(children);
  };

  return HashHistory;
}(_react2.default.Component);

HashHistory.propTypes = {
  basename: _react.PropTypes.string,
  getUserConfirmation: _react.PropTypes.func,
  hashType: _react.PropTypes.oneOf(['hashbang', 'noslash', 'slash']),
  children: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]).isRequired
};
HashHistory.childContextTypes = {
  history: _PropTypes.history.isRequired
};
exports.default = HashHistory;