'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PropTypes = require('./PropTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var createHistoryComponent = function createHistoryComponent(displayName, createHistory, propTypes) {
  var History = function (_React$Component) {
    _inherits(History, _React$Component);

    function History() {
      _classCallCheck(this, History);

      return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }

    History.prototype.getChildContext = function getChildContext() {
      return {
        history: this.history
      };
    };

    History.prototype.componentWillMount = function componentWillMount() {
      var _this2 = this;

      var options = Object.keys(propTypes).reduce(function (memo, key) {
        memo[key] = _this2.props[key];
        return memo;
      }, {});

      this.history = createHistory(options);

      // Do this here so we catch actions in cDM.
      this.unlisten = this.history.listen(function () {
        return _this2.forceUpdate();
      });
    };

    History.prototype.componentWillUnmount = function componentWillUnmount() {
      this.unlisten();
    };

    History.prototype.render = function render() {
      var children = this.props.children;


      if (typeof children !== 'function') return _react2.default.Children.only(children);

      return children({
        action: this.history.action,
        location: this.history.location,
        history: this.history
      });
    };

    return History;
  }(_react2.default.Component);

  History.displayName = displayName;
  History.propTypes = _extends({}, propTypes, {
    children: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.func]).isRequired
  });
  History.childContextTypes = {
    history: _PropTypes.history.isRequired
  };


  return History;
};

exports.default = createHistoryComponent;